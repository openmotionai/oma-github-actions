name: 'Claude Code Review'
description: 'AI-powered code review using Claude 4 Sonnet with extended thinking'
author: 'OMA (openmotionai)'

inputs:
  anthropic-api-key:
    description: 'Anthropic API key for Claude access'
    required: true
  github-token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}
  model:
    description: 'Claude model to use'
    required: false
    default: 'claude-sonnet-4-20250514'
  max-tokens:
    description: 'Maximum tokens for Claude response'
    required: false
    default: '4000'
  thinking-budget:
    description: 'Thinking budget tokens for extended reasoning'
    required: false
    default: '2000'

outputs:
  review-posted:
    description: 'Whether a review was posted'
  has-changes:
    description: 'Whether code changes were suggested'
  pr-created:
    description: 'Whether a PR was created with fixes'
  fix-branch:
    description: 'Name of the fix branch if created'

runs:
  using: 'composite'
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ inputs.github-token }}
        fetch-depth: 0
        repository: ${{ github.repository }}

    - name: Get PR/Issue details
      id: pr-details
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // Get PR/Issue number based on event type
          let prNumber;
          let isIssueMode = false;

          if (context.payload.pull_request) {
            prNumber = context.payload.pull_request.number;
          } else if (context.issue && context.issue.number) {
            prNumber = context.issue.number;
            // Check if this is a standalone issue (not a PR)
            isIssueMode = !context.issue.pull_request;
          } else {
            throw new Error('Could not determine PR/Issue number');
          }

          console.log(`Number: ${prNumber}`);
          console.log(`Is Issue Mode: ${isIssueMode}`);
          core.setOutput('pr_number', prNumber);
          core.setOutput('is_issue_mode', isIssueMode);

          if (!isIssueMode) {
            // Only get PR details if this is actually a PR
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            core.setOutput('head_ref', pr.data.head.ref);
            core.setOutput('head_sha', pr.data.head.sha);
            core.setOutput('base_ref', pr.data.base.ref);
            core.setOutput('pr_title', pr.data.title);
          } else {
            // For issues, set default values
            core.setOutput('head_ref', 'main');
            core.setOutput('head_sha', '');
            core.setOutput('base_ref', 'main');
            core.setOutput('pr_title', context.issue.title);
          }

    - name: Switch to PR branch
      if: steps.pr-details.outputs.is_issue_mode != 'true'
      shell: bash
      run: |
        git fetch origin ${{ steps.pr-details.outputs.head_ref }}
        git checkout ${{ steps.pr-details.outputs.head_ref }}

    - name: Extract command from comment
      id: extract-command
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          let comment = '';
          let hasCommand = false;
          
          // Handle different event types
          if (context.payload.comment) {
            comment = context.payload.comment.body;
          } else if (context.payload.review && context.payload.review.body) {
            comment = context.payload.review.body;
          } else if (context.payload.issue && context.payload.issue.body) {
            // For issue creation events, check the issue body
            comment = context.payload.issue.body;
          } else {
            // For PR events without comments, do a general review
            core.setOutput('command', 'review this PR');
            core.setOutput('has_command', 'true');
            core.setOutput('action_type', 'review');
            console.log('No comment found, defaulting to general PR review');
            return;
          }
          
          const claudeMatch = comment.match(/@[Cc]laude\s+(.+)/);
          
          if (claudeMatch) {
            const command = claudeMatch[1].trim();
            core.setOutput('command', command);
            core.setOutput('has_command', 'true');
            
            // Determine action type based on command
            let actionType = 'review'; // default

            if (command.toLowerCase().startsWith('plan')) {
              actionType = 'plan';
            } else if (command.toLowerCase().startsWith('fix') ||
                       command.toLowerCase().startsWith('implement') ||
                       command.toLowerCase().startsWith('apply')) {
              actionType = 'fix';
            } else if (command.toLowerCase().startsWith('review') ||
                       command.toLowerCase().startsWith('analyze') ||
                       command.toLowerCase().startsWith('check') ||
                       command.toLowerCase().startsWith('examine')) {
              actionType = 'review';
            } else {
              // Fallback: check for action keywords in the command
              const fixKeywords = ['fix', 'repair', 'correct', 'implement', 'apply', 'create pr', 'make changes'];
              const planKeywords = ['plan', 'discuss', 'think about', 'consider', 'strategy', 'approach'];

              if (fixKeywords.some(keyword => command.toLowerCase().includes(keyword))) {
                actionType = 'fix';
              } else if (planKeywords.some(keyword => command.toLowerCase().includes(keyword))) {
                actionType = 'plan';
              }
            }
            
            core.setOutput('action_type', actionType);
            console.log(`Command: ${command}`);
            console.log(`Action type: ${actionType}`);
          } else {
            core.setOutput('has_command', 'false');
          }

    - name: Setup Python
      if: steps.extract-command.outputs.has_command == 'true'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Start GitHub MCP Server
      if: steps.extract-command.outputs.has_command == 'true'
      shell: bash
      run: |
        # Start GitHub MCP server for reliable GitHub operations
        docker run -d --name github-mcp \
          -e GITHUB_PERSONAL_ACCESS_TOKEN=${{ inputs.github-token }} \
          -p 3000:3000 \
          ghcr.io/github/github-mcp-server:latest

        # Wait for server to be ready
        sleep 10
        echo "MCP server started"

    - name: Install dependencies
      if: steps.extract-command.outputs.has_command == 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install anthropic==0.53.0 PyGithub==1.59.1 httpx==0.25.2

    - name: Run Claude analysis
      if: steps.extract-command.outputs.has_command == 'true'
      id: claude-analysis
      shell: bash
      env:
        ANTHROPIC_API_KEY: ${{ inputs.anthropic-api-key }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        PR_NUMBER: ${{ steps.pr-details.outputs.pr_number }}
        COMMAND: ${{ steps.extract-command.outputs.command }}
        ACTION_TYPE: ${{ steps.extract-command.outputs.action_type }}
        HEAD_REF: ${{ steps.pr-details.outputs.head_ref }}
        BASE_REF: ${{ steps.pr-details.outputs.base_ref }}
        CLAUDE_MODEL: ${{ inputs.model }}
        MAX_TOKENS: ${{ inputs.max-tokens }}
        THINKING_BUDGET: ${{ inputs.thinking-budget }}
        MCP_SERVER_URL: http://localhost:3000
      run: python ${{ github.action_path }}/claude_reviewer.py

    - name: Create fix branch and PR
      if: steps.extract-command.outputs.has_command == 'true' && steps.claude-analysis.outputs.has_changes == 'true' && steps.extract-command.outputs.action_type == 'fix'
      id: create-fix-pr
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        HEAD_REF: ${{ steps.pr-details.outputs.head_ref }}
        PR_NUMBER: ${{ steps.pr-details.outputs.pr_number }}
        PR_TITLE: ${{ steps.pr-details.outputs.pr_title }}
        COMMAND: ${{ steps.extract-command.outputs.command }}
      run: |
        # Configure git
        git config --global user.name "claude-code-review[bot]"
        git config --global user.email "claude-code-review[bot]@users.noreply.github.com"

        # Create fix branch name with timestamp
        TIMESTAMP=$(date +%y%m%d-%H%M%S)
        FIX_BRANCH="${HEAD_REF}-claude-fix-${TIMESTAMP}"

        # Create and switch to fix branch
        git checkout -b "$FIX_BRANCH"

        # Add and commit changes
        git add .
        git commit -m "Claude fixes: ${COMMAND}

        Applied automated fixes suggested by Claude for PR #${PR_NUMBER}: ${PR_TITLE}

        Original command: ${COMMAND}"

        # Push the fix branch
        git push origin "$FIX_BRANCH"

        # Set outputs for PR creation
        echo "fix_branch=$FIX_BRANCH" >> $GITHUB_OUTPUT
        echo "should_create_pr=true" >> $GITHUB_OUTPUT

    - name: Create Pull Request
      if: steps.create-fix-pr.outputs.should_create_pr == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ inputs.github-token }}
        branch: ${{ steps.create-fix-pr.outputs.fix_branch }}
        base: ${{ steps.pr-details.outputs.head_ref }}
        title: "🤖 Claude fixes for PR #${{ steps.pr-details.outputs.pr_number }}"
        body: |
          ## 🤖 Automated Claude Fixes

          This PR contains automated fixes suggested by Claude for PR #${{ steps.pr-details.outputs.pr_number }}.

          **Original Request:** ${{ steps.extract-command.outputs.command }}
          **Target PR:** #${{ steps.pr-details.outputs.pr_number }} - ${{ steps.pr-details.outputs.pr_title }}
          **Base Branch:** ${{ steps.pr-details.outputs.head_ref }}

          ### Changes Applied
          Claude analyzed the code and applied the following fixes:

          _See the detailed analysis in the comment on the original PR._

          ---

          **⚠️ Review Required:** Please review these automated changes before merging.

          *Generated by Claude Code Review Action*
        draft: false

    - name: Post review comment
      if: steps.extract-command.outputs.has_command == 'true'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');
          let reviewContent = '';

          // Get the review file path from the previous step
          const reviewFile = '${{ steps.claude-analysis.outputs.review_file }}' || '/tmp/claude_review.md';

          // Get the command safely - escape quotes to prevent JS syntax errors
          let command = `${{ steps.extract-command.outputs.command }}`.replace(/'/g, "\\'").replace(/"/g, '\\"');
          if (!command) {
            command = 'general review';
          }

          try {
            reviewContent = fs.readFileSync(reviewFile, 'utf8');
          } catch (error) {
            reviewContent = `## 🤖 Claude Analysis

            I've analyzed your request: "${command}"

            The analysis completed but no specific changes were recommended at this time.

            ---
            *Claude Code Review Action*`;
          }

          // Add action-specific footer based on action type
          const hasChanges = '${{ steps.claude-analysis.outputs.has_changes }}' === 'true';
          const actionType = '${{ steps.extract-command.outputs.action_type }}';
          const fixBranch = '${{ steps.create-fix-pr.outputs.fix_branch }}';

          if (hasChanges && actionType === 'fix' && fixBranch) {
            reviewContent += `\n\n---\n\n🔧 **Automated fixes have been applied!**\n\nI've created a pull request with the suggested changes: [View PR with fixes](https://github.com/${context.repo.owner}/${context.repo.repo}/compare/${{ steps.pr-details.outputs.head_ref }}...${fixBranch})\n\nPlease review the changes before merging.`;
          } else if (actionType === 'plan') {
            reviewContent += `\n\n---\n\n💡 **Planning Mode**: This was a planning discussion. When you're ready to implement changes, use \`@claude fix [specific issue]\` to create a PR with the fixes.`;
          } else if (actionType === 'review') {
            reviewContent += `\n\n---\n\n🔍 **Review Mode**: This was an analysis. To implement fixes, use \`@claude fix [specific issue]\` or start with \`@claude plan\` for strategic discussion.`;
          }

          // Get PR number based on event type
          let prNumber;
          if (context.payload.pull_request) {
            prNumber = context.payload.pull_request.number;
          } else if (context.issue && context.issue.number) {
            prNumber = context.issue.number;
          } else {
            prNumber = ${{ steps.pr-details.outputs.pr_number }};
          }

          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
            body: reviewContent
          });

          core.setOutput('review-posted', 'true');

          // Set additional outputs
          if (hasChanges && actionType === 'propose' && fixBranch) {
            core.setOutput('pr-created', 'true');
            core.setOutput('fix-branch', fixBranch);
          } else {
            core.setOutput('pr-created', 'false');
            core.setOutput('fix-branch', '');
          }

branding:
  icon: 'eye'
  color: 'blue'